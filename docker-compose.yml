version: '3.8'

services:
  # ZooKeeper service
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: dfg-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zk_data:/var/lib/zookeeper/data
      - zk_logs:/var/lib/zookeeper/log
    networks:
      - dfg-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis service
  redis:
    image: redis:7-alpine
    hostname: redis
    container_name: dfg-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dfg-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Head Server 1 (Primary)
  head-server-1:
    build: .
    hostname: head-server-1
    container_name: dfg-head-server-1
    ports:
      - "9669:9669"
    environment:
      - SERVER_ID=head_server_1
      - SERVER_PORT=9669
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ZK_HOSTS=zookeeper:2181
      - SERVER_ROLE=primary
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - dfg-network
    depends_on:
      - redis
      - zookeeper
    command: ["/usr/local/bin/head_server"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9669/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Head Server 2 (Backup)
  head-server-2:
    build: .
    hostname: head-server-2
    container_name: dfg-head-server-2
    ports:
      - "9670:9669"
    environment:
      - SERVER_ID=head_server_2
      - SERVER_PORT=9669
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ZK_HOSTS=zookeeper:2181
      - SERVER_ROLE=backup
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - dfg-network
    depends_on:
      - redis
      - zookeeper
    command: ["/usr/local/bin/head_server"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9669/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Cluster Server 1
  cluster-server-1:
    build: .
    hostname: cluster-server-1
    container_name: dfg-cluster-server-1
    ports:
      - "8080:8080"
      - "9091:9091"  # Prometheus metrics
    environment:
      - SERVER_ID=1
      - SERVER_PORT=8080
      - METRICS_PORT=9091
      - HEAD_SERVER_HOST=head-server-1
      - HEAD_SERVER_PORT=9669
    volumes:
      - cluster1_data:/tmp/cluster_storage
      - ./logs:/app/logs
    networks:
      - dfg-network
    depends_on:
      - head-server-1
    command: ["/usr/local/bin/cluster_server", "--server-id", "1", "--port", "8080"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/metrics", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cluster Server 2
  cluster-server-2:
    build: .
    hostname: cluster-server-2
    container_name: dfg-cluster-server-2
    ports:
      - "8081:8081"
      - "9092:9091"  # Prometheus metrics
    environment:
      - SERVER_ID=2
      - SERVER_PORT=8081
      - METRICS_PORT=9091
      - HEAD_SERVER_HOST=head-server-1
      - HEAD_SERVER_PORT=9669
    volumes:
      - cluster2_data:/tmp/cluster_storage
      - ./logs:/app/logs
    networks:
      - dfg-network
    depends_on:
      - head-server-1
    command: ["/usr/local/bin/cluster_server", "--server-id", "2", "--port", "8081"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/metrics", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cluster Server 3
  cluster-server-3:
    build: .
    hostname: cluster-server-3
    container_name: dfg-cluster-server-3
    ports:
      - "8082:8082"
      - "9093:9091"  # Prometheus metrics
    environment:
      - SERVER_ID=3
      - SERVER_PORT=8082
      - METRICS_PORT=9091
      - HEAD_SERVER_HOST=head-server-1
      - HEAD_SERVER_PORT=9669
    volumes:
      - cluster3_data:/tmp/cluster_storage
      - ./logs:/app/logs
    networks:
      - dfg-network
    depends_on:
      - head-server-1
    command: ["/usr/local/bin/cluster_server", "--server-id", "3", "--port", "8082"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/metrics", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Health Checker (Original)
  health-checker:
    build: .
    hostname: health-checker
    container_name: dfg-health-checker
    ports:
      - "9000:9000"
    environment:
      - MONITOR_PORT=9000
      - HEAD_SERVER_HOST=head-server-1
      - HEAD_SERVER_PORT=9669
    volumes:
      - ./logs:/app/logs
    networks:
      - dfg-network
    depends_on:
      - head-server-1
      - cluster-server-1
      - cluster-server-2
      - cluster-server-3
    command: ["/usr/local/bin/health_checker"]
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ZooKeeper Head Server Monitor
  zk-head-monitor:
    build: .
    hostname: zk-head-monitor
    container_name: dfg-zk-head-monitor
    environment:
      - ZK_HOSTS=zookeeper:2181
      - MONITOR_ID=zk_monitor_docker
    volumes:
      - ./logs:/app/logs
    networks:
      - dfg-network
    depends_on:
      - zookeeper
      - head-server-1
      - head-server-2
    command: ["/usr/local/bin/zk_head_server_monitor", "--zk-hosts", "zookeeper:2181"]
    healthcheck:
      test: ["CMD", "pgrep", "-f", "zk_head_server_monitor"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    hostname: prometheus
    container_name: dfg-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - dfg-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - cluster-server-1
      - cluster-server-2
      - cluster-server-3

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    hostname: grafana
    container_name: dfg-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./docker/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./docker/dashboards:/var/lib/grafana/dashboards
    networks:
      - dfg-network
    depends_on:
      - prometheus

  # Test client for system validation
  test-client:
    build: .
    hostname: test-client
    container_name: dfg-test-client
    environment:
      - HEAD_SERVER_HOST=head-server-1
      - HEAD_SERVER_PORT=9669
    volumes:
      - ./test_data:/app/test_data
      - ./logs:/app/logs
    networks:
      - dfg-network
    depends_on:
      - head-server-1
      - cluster-server-1
      - cluster-server-2
      - cluster-server-3
    command: ["sleep", "infinity"]  # Keep container running for manual testing

volumes:
  zk_data:
  zk_logs:
  redis_data:
  cluster1_data:
  cluster2_data:
  cluster3_data:
  prometheus_data:
  grafana_data:

networks:
  dfg-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16