// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: heart_beat.proto
// Protobuf C++ Version: 6.32.0

#include "heart_beat.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace heart_beat {
namespace v1 {

inline constexpr HeartBeat::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{nullptr},
        server_id_{0},
        rack_id_{0},
        cpu_usage_{0},
        total_storage_used_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HeartBeat::HeartBeat(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(HeartBeat_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HeartBeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartBeatDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartBeatDefaultTypeInternal() {}
  union {
    HeartBeat _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartBeatDefaultTypeInternal _HeartBeat_default_instance_;
}  // namespace v1
}  // namespace heart_beat
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_heart_5fbeat_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_heart_5fbeat_2eproto = nullptr;
const ::uint32_t
    TableStruct_heart_5fbeat_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::heart_beat::v1::HeartBeat, _impl_._has_bits_),
        9, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::heart_beat::v1::HeartBeat, _impl_.server_id_),
        PROTOBUF_FIELD_OFFSET(::heart_beat::v1::HeartBeat, _impl_.ip_),
        PROTOBUF_FIELD_OFFSET(::heart_beat::v1::HeartBeat, _impl_.rack_id_),
        PROTOBUF_FIELD_OFFSET(::heart_beat::v1::HeartBeat, _impl_.cpu_usage_),
        PROTOBUF_FIELD_OFFSET(::heart_beat::v1::HeartBeat, _impl_.total_storage_used_),
        PROTOBUF_FIELD_OFFSET(::heart_beat::v1::HeartBeat, _impl_.timestamp_),
        2,
        0,
        3,
        4,
        5,
        1,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::heart_beat::v1::HeartBeat)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::heart_beat::v1::_HeartBeat_default_instance_._instance,
};
const char descriptor_table_protodef_heart_5fbeat_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\020heart_beat.proto\022\rheart_beat.v1\032\037googl"
    "e/protobuf/timestamp.proto\"\252\001\n\tHeartBeat"
    "\022\021\n\tserver_id\030\001 \001(\005\022\n\n\002ip\030\002 \001(\t\022\024\n\007rack_"
    "id\030\003 \001(\005H\000\210\001\001\022\021\n\tcpu_usage\030\004 \001(\002\022\032\n\022tota"
    "l_storage_used\030\005 \001(\002\022-\n\ttimestamp\030\006 \001(\0132"
    "\032.google.protobuf.TimestampB\n\n\010_rack_idb"
    "\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_heart_5fbeat_2eproto_deps[1] = {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_heart_5fbeat_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_heart_5fbeat_2eproto = {
    false,
    false,
    247,
    descriptor_table_protodef_heart_5fbeat_2eproto,
    "heart_beat.proto",
    &descriptor_table_heart_5fbeat_2eproto_once,
    descriptor_table_heart_5fbeat_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_heart_5fbeat_2eproto::offsets,
    file_level_enum_descriptors_heart_5fbeat_2eproto,
    file_level_service_descriptors_heart_5fbeat_2eproto,
};
namespace heart_beat {
namespace v1 {
// ===================================================================

class HeartBeat::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<HeartBeat>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(HeartBeat, _impl_._has_bits_);
};

void HeartBeat::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002U;
}
HeartBeat::HeartBeat(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, HeartBeat_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:heart_beat.v1.HeartBeat)
}
PROTOBUF_NDEBUG_INLINE HeartBeat::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::heart_beat::v1::HeartBeat& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        ip_(arena, from.ip_) {}

HeartBeat::HeartBeat(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const HeartBeat& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, HeartBeat_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HeartBeat* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = ((cached_has_bits & 0x00000002U) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.timestamp_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, server_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, server_id_),
           offsetof(Impl_, total_storage_used_) -
               offsetof(Impl_, server_id_) +
               sizeof(Impl_::total_storage_used_));

  // @@protoc_insertion_point(copy_constructor:heart_beat.v1.HeartBeat)
}
PROTOBUF_NDEBUG_INLINE HeartBeat::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        ip_(arena) {}

inline void HeartBeat::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, total_storage_used_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::total_storage_used_));
}
HeartBeat::~HeartBeat() {
  // @@protoc_insertion_point(destructor:heart_beat.v1.HeartBeat)
  SharedDtor(*this);
}
inline void HeartBeat::SharedDtor(MessageLite& self) {
  HeartBeat& this_ = static_cast<HeartBeat&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.ip_.Destroy();
  delete this_._impl_.timestamp_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL HeartBeat::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) HeartBeat(arena);
}
constexpr auto HeartBeat::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(HeartBeat),
                                            alignof(HeartBeat));
}
constexpr auto HeartBeat::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_HeartBeat_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &HeartBeat::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<HeartBeat>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &HeartBeat::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<HeartBeat>(), &HeartBeat::ByteSizeLong,
              &HeartBeat::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(HeartBeat, _impl_._cached_size_),
          false,
      },
      &HeartBeat::kDescriptorMethods,
      &descriptor_table_heart_5fbeat_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull HeartBeat_class_data_ =
        HeartBeat::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
HeartBeat::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&HeartBeat_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(HeartBeat_class_data_.tc_table);
  return HeartBeat_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 34, 2>
HeartBeat::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HeartBeat, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    HeartBeat_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::heart_beat::v1::HeartBeat>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 server_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HeartBeat, _impl_.server_id_), 2>(),
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(HeartBeat, _impl_.server_id_)}},
    // string ip = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(HeartBeat, _impl_.ip_)}},
    // optional int32 rack_id = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HeartBeat, _impl_.rack_id_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(HeartBeat, _impl_.rack_id_)}},
    // float cpu_usage = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 4, 0, PROTOBUF_FIELD_OFFSET(HeartBeat, _impl_.cpu_usage_)}},
    // float total_storage_used = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 5, 0, PROTOBUF_FIELD_OFFSET(HeartBeat, _impl_.total_storage_used_)}},
    // .google.protobuf.Timestamp timestamp = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 0, PROTOBUF_FIELD_OFFSET(HeartBeat, _impl_.timestamp_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 server_id = 1;
    {PROTOBUF_FIELD_OFFSET(HeartBeat, _impl_.server_id_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // string ip = 2;
    {PROTOBUF_FIELD_OFFSET(HeartBeat, _impl_.ip_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional int32 rack_id = 3;
    {PROTOBUF_FIELD_OFFSET(HeartBeat, _impl_.rack_id_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // float cpu_usage = 4;
    {PROTOBUF_FIELD_OFFSET(HeartBeat, _impl_.cpu_usage_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // float total_storage_used = 5;
    {PROTOBUF_FIELD_OFFSET(HeartBeat, _impl_.total_storage_used_), _Internal::kHasBitsOffset + 5, 0, (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // .google.protobuf.Timestamp timestamp = 6;
    {PROTOBUF_FIELD_OFFSET(HeartBeat, _impl_.timestamp_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }},
  {{
    "\27\0\2\0\0\0\0\0"
    "heart_beat.v1.HeartBeat"
    "ip"
  }},
};
PROTOBUF_NOINLINE void HeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:heart_beat.v1.HeartBeat)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.ip_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
  }
  if ((cached_has_bits & 0x0000003cU) != 0) {
    ::memset(&_impl_.server_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.total_storage_used_) -
        reinterpret_cast<char*>(&_impl_.server_id_)) + sizeof(_impl_.total_storage_used_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL HeartBeat::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const HeartBeat& this_ = static_cast<const HeartBeat&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL HeartBeat::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const HeartBeat& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:heart_beat.v1.HeartBeat)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 server_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_server_id() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
              stream, this_._internal_server_id(), target);
    }
  }

  // string ip = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_ip().empty()) {
      const ::std::string& _s = this_._internal_ip();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "heart_beat.v1.HeartBeat.ip");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional int32 rack_id = 3;
  if ((cached_has_bits & 0x00000008U) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
            stream, this_._internal_rack_id(), target);
  }

  // float cpu_usage = 4;
  if ((cached_has_bits & 0x00000010U) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_cpu_usage()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          4, this_._internal_cpu_usage(), target);
    }
  }

  // float total_storage_used = 5;
  if ((cached_has_bits & 0x00000020U) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_total_storage_used()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          5, this_._internal_total_storage_used(), target);
    }
  }

  // .google.protobuf.Timestamp timestamp = 6;
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.timestamp_, this_._impl_.timestamp_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:heart_beat.v1.HeartBeat)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t HeartBeat::ByteSizeLong(const MessageLite& base) {
  const HeartBeat& this_ = static_cast<const HeartBeat&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t HeartBeat::ByteSizeLong() const {
  const HeartBeat& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:heart_beat.v1.HeartBeat)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fU) != 0) {
    // string ip = 2;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_ip().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_ip());
      }
    }
    // .google.protobuf.Timestamp timestamp = 6;
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timestamp_);
    }
    // int32 server_id = 1;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_server_id() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_server_id());
      }
    }
    // optional int32 rack_id = 3;
    if ((cached_has_bits & 0x00000008U) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_rack_id());
    }
    // float cpu_usage = 4;
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_cpu_usage()) != 0) {
        total_size += 5;
      }
    }
    // float total_storage_used = 5;
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_total_storage_used()) != 0) {
        total_size += 5;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void HeartBeat::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HeartBeat*>(&to_msg);
  auto& from = static_cast<const HeartBeat&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:heart_beat.v1.HeartBeat)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_ip().empty()) {
        _this->_internal_set_ip(from._internal_ip());
      } else {
        if (_this->_impl_.ip_.IsDefault()) {
          _this->_internal_set_ip("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(from._impl_.timestamp_ != nullptr);
      if (_this->_impl_.timestamp_ == nullptr) {
        _this->_impl_.timestamp_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.timestamp_);
      } else {
        _this->_impl_.timestamp_->MergeFrom(*from._impl_.timestamp_);
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_server_id() != 0) {
        _this->_impl_.server_id_ = from._impl_.server_id_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      _this->_impl_.rack_id_ = from._impl_.rack_id_;
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_cpu_usage()) != 0) {
        _this->_impl_.cpu_usage_ = from._impl_.cpu_usage_;
      }
    }
    if ((cached_has_bits & 0x00000020U) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_total_storage_used()) != 0) {
        _this->_impl_.total_storage_used_ = from._impl_.total_storage_used_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:heart_beat.v1.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HeartBeat::InternalSwap(HeartBeat* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, &other->_impl_.ip_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeartBeat, _impl_.total_storage_used_)
      + sizeof(HeartBeat::_impl_.total_storage_used_)
      - PROTOBUF_FIELD_OFFSET(HeartBeat, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata HeartBeat::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace heart_beat
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_heart_5fbeat_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
